//
//  CoreDataWorker.swift
//  TrailerGTV
//
//  Created by Humberto  JuliÃ£o on 20/05/16.
//  Copyright (c) 2016 Daniel Trevisan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreData

class CoreDataWorker {
    let appDelegate =
        UIApplication.sharedApplication().delegate as! AppDelegate
    
  // MARK: Business Logic
    func saveUsuario(name: String){
        
        let managedContext = appDelegate.managedObjectContext
        
        
        let entity =  NSEntityDescription.entityForName("User",
                                                        inManagedObjectContext:managedContext)
        
        let user = NSManagedObject(entity: entity!,
                                     insertIntoManagedObjectContext: managedContext)
        
        
        user.setValue(name, forKey: "name")
        
        
        do {
            try managedContext.save()
        } catch let error as NSError  {
            print("Could not save \(error), \(error.userInfo)")
        }
    }
    
    //retrieve all users
    func users() -> NSMutableArray{
        
        let managedContext = appDelegate.managedObjectContext
        
        let fetchRequest = NSFetchRequest(entityName: "User")
        
        let itens = NSMutableArray()
        
        do {
            let results =
                try managedContext.executeFetchRequest(fetchRequest)
            itens.addObjectsFromArray(results as! [NSManagedObject])
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        
        return itens
    }
    
    func removeUsuario(name: String){
        
    }
    
    // TODO: Validate this type
    func saveWishList(id:String){
        
    }
    
    //retrieve the wishlist of a user
    func wishes(user:String) -> NSMutableArray {
        let managedContext = appDelegate.managedObjectContext
        
        let fetchRequest = NSFetchRequest(entityName: "wishes")
        
        let itens = NSMutableArray()
        
        do {
            let results =
                try managedContext.executeFetchRequest(fetchRequest)
            itens.addObjectsFromArray(results as! [NSManagedObject])
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        
        return itens
    }
    
    func removeWishList(id:String){
        
    }
}
