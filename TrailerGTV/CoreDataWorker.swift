//
//  CoreDataWorker.swift
//  TrailerGTV
//
//  Created by Humberto  JuliÃ£o on 20/05/16.
//  Copyright (c) 2016 Daniel Trevisan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreData

class CoreDataWorker {
    var appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
    
    // add a game to wishlist
    func addGameToWishList(id:String,name:String,imageLink:String){
        appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
        
        let managedContext = appDelegate.managedObjectContext
        
        let entity =  NSEntityDescription.entityForName("Games", inManagedObjectContext:managedContext)
        
        let game = Games(entity: entity!, insertIntoManagedObjectContext: managedContext)
        
        game.idGame = id
        game.gameName = name
        game.imageLink = imageLink
        
        self.save(managedContext)
    }
    
    func gamesFromWishList() -> NSMutableArray {
        appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
        let managedContext = appDelegate.managedObjectContext
        
        let fetchRequest = NSFetchRequest(entityName: "Games")
        
        let resultsArray = NSMutableArray()
        
        do {
            let results =
                try managedContext.executeFetchRequest(fetchRequest)
            if(results.count > 0){
                resultsArray.addObjectsFromArray(results as! [Games])
            }
            
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        
        return resultsArray
    }
    
    //delete game from wishlist by id
    func removeGameFromWishList(id:String){
        appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
        
        let managedContext = appDelegate.managedObjectContext
        
        let fetchRequest = NSFetchRequest(entityName: "Games")
        
        let predicateGame = NSPredicate(format: "idGame == %@", id)
        
        fetchRequest.predicate = predicateGame
        
        do {
            let results = try managedContext.executeFetchRequest(fetchRequest)
            if(results.count > 0){
                let item = results.first as! Games
                managedContext.deleteObject(item)
            }
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        self.save(managedContext)
        
    }
    
    func searchByID(id:String) -> Bool{
        appDelegate = UIApplication.sharedApplication().delegate as! AppDelegate
        
        let managedContext = appDelegate.managedObjectContext
        
        let fetchRequest = NSFetchRequest(entityName: "Games")
        
        let predicateGame = NSPredicate(format: "idGame == %@", id)
        
        fetchRequest.predicate = predicateGame
        
        do {
            let results = try managedContext.executeFetchRequest(fetchRequest)
            if(results.count > 0){
                return true
            }else{
                return false}
        } catch let error as NSError {
            print("Could not fetch \(error), \(error.userInfo)")
        }
        return false
    
    }
    
    private func save(managedContext:NSManagedObjectContext){
        
        do {
            try managedContext.save()
        } catch let error as NSError  {
            print("Could not save \(error), \(error.userInfo)")
        }
        
    }
}